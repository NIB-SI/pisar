% -*- TeX:Rnw:UTF-8 -*-
% ----------------------------------------------------------------
% .R knitr file  ************************************************
% ----------------------------------------------------------------
%%
 %\VignetteIndexEntry{HowTo Use pISA-tree in R}
 %\VignetteDepends{}
 %\VignetteEngine{knitr::knit}
 %\VignettePackage{pisar}
 
\documentclass[a4paper,12pt]{article}
%\usepackage[slovene]{babel}
\usepackage[utf8]{inputenc} %% must be here for Sweave encoding check
\providecommand\code{\bgroup\@codex}
\def\@codex#1{{\normalfont\ttfamily\hyphenchar\font=-1  #1}\egroup}
\providecommand{\codei}[1]{\code{#1}\index{\code{#1}}}
\providecommand{\NA}{\code{NA}}
\providecommand{\file}{\code}
\providecommand{\kbd}[1]{{\normalfont\texttt{#1}}}
\providecommand{\key}[1]{{\normalfont\texttt{\uppercase{#1}}}}
\providecommand{\var}[1]{{\normalfont\textsl{#1}}}
\providecommand{\fct}[1]{{\ttfamily\textbf{#1}()}}
\newcommand{\ii}[1]{{\it #1}} % for index page reference in italic
\providecommand{\fcti}[1]{\fct{#1}\index{#1@{\fct{#1}}}}
\providecommand{\strong}[1]{{\normalfont\fontseries{b}\selectfont  #1}}
\let\pkg=\strong
\providecommand{\email}[1]{\href{mailto:#1}{\normalfont\small\texttt{#1}}}

%%\input{abpkg}
%%\input{abcmd}
%%\input{abpage}
%%\usepackage{pgf,pgfarrows,pgfnodes,pgfautomata,pgfheaps,pgfshade}
%%\usepackage{amsmath,amssymb}
%%\usepackage{colortbl}
%%
%%\input{mysweave}

<<include=FALSE>>=
#outputFile <- "report-copy.pdf"
render_sweave()
opts_chunk$set(fig.path='./figs/',tidy=TRUE)
opts_knit$set(concordance=TRUE)
@
\setkeys{Gin}{width=0.8\textwidth}  % set graphicx parameter
\usepackage{lmodern}
%%\input{abfont}

% ----------------------------------------------------------------
\begin{document}
%% Sweave settings for includegraphics default plot size (Sweave default is 0.8)
%% notice this must be after begin{document}
%%% \setkeys{Gin}{width=0.9\textwidth}
% ----------------------------------------------------------------
\title{HowTo Use pISA-tree in R}
\author{Andrej Blejec\\
National Institute of Biology\\
Ljubljana, Slovenia\\
%\address{}%
\small{Email: \code{andrej.blejec@nib.si}}
}%
%
%\thanks{}%
%\subjclass{}%
%\keywords{}%

%\date{}%
%\dedicatory{}%
%\commby{}%
\maketitle
% ----------------------------------------------------------------
%\begin{abstract}
%
%\end{abstract}
% ----------------------------------------------------------------
\tableofcontents
<<Author:,echo=FALSE>>=
###############################################
##                                           ##
## (c) Andrej Blejec (andrej.blejec@nib.si)  ##
##                                           ##
###############################################
@
<<initialize,echo=FALSE,results='hide',message=FALSE>>=
options(width=70)
#library(Hmisc)
#library(xlsReadWrite)
@

\section{Introduction}
The package \pkg{pisar} implements functions that can be used to 
use pISA-tree metadata and pISA-tree standardized directory tree in R.
The benefit for making reports reproducible is to get all details about the
file positions from the pISA metadata. 

pISA-tree is a system to organize research data in a structured way. 

\emph{Enter the pISA-tree description here}

\section{Get the pISA-tree information}

First you need to load the \pkg{pisar} package.

<<>>=
library(pisar)
@

A data analysis report usually starts from a directory, that is 
included in an Assay layer, with class \code{DRY} and type \code{R}.
The \pkg{pisar} package comes with a pISA directory tree that can be 
used for demonstration:

<<>>=
astring <- "_p_Demo/_I_Test/_S_Show/_A_Work-R/other"
@

We have a project \code{'Demo'}, an Investigation \code{Test} with Study \code{Show}  and Assay \code{Work}. In our case, we will use the folder \file{other} as R session working directory. 

<<>>=
.pisaPath <- system.file("extdata",astring,package="pisar")
oldwd <- setwd(.pisaPath)
strsplit(getwd(),"/")

@

If you are working with knitr, use:
<<>>=
opts_knit$set(root.dir = .pisaPath)
@

We can check the content of the working directory, that contains at least a \file{README.MD} file:
<<>>=
dir()
readLines("README.MD")
@

\section{Layer's root directory}

For navigation around the pISA tree, we can rely on layered structure. All layers are somewhere above the working directory. This enablesrelative paths: read two dots (..) as 'parent' and one dot (.) as 'here'.

Let's see the relative paths to the layers and check existence of the metadata files:

Project:
<<>>=
.proot <- getRoot("p")
.proot
dir(.proot,pattern=glob2rx("*.TXT"))
@

Investigation:
<<>>=
.iroot <- getRoot("I")
.iroot
dir(.iroot,pattern=glob2rx("*.TXT"))
@

Study:
<<>>=
.sroot <- getRoot("S")
.sroot
dir(.sroot,pattern=glob2rx("*.TXT"))
@

Assay:
<<>>=
.aroot <- getRoot("A")
.aroot
dir(.aroot,pattern=glob2rx("*.TXT"))
@

\section{Metadata files}

Metadata files contain Key/Value pair lines with detailed information about the layer. We can read them with the function \fct{readMeta}:

<<>>=
.pmeta <- readMeta(.proot)
@

In addition to read the metadata information as a \code{data.frame}, function
\fct{readMeta} sets two additional class values, which enables nicer printing:

<<>>=
str(.pmeta)
@

Indentation of the Value part depends on the line widths and we will set it to some higher value.

<<>>=
options(width=110)
.pmeta
options(width=70)
@

We can get other metadata information:

<<>>=
options(width=110)
(.imeta <- readMeta(.iroot))
(.smeta <- readMeta(.sroot))
(.ameta <- readMeta(.aroot))
options(width=70)
@

\section{Getting specific parts from the metadata object}

In addition to usual data extraction methods (using square brackets), we can do it with a function \fct{getMeta}:

Get the title of the project:

<<>>=
getMeta(.pmeta,"Title")
getMeta(.pmeta,"Title:")
@

As we can see, the requested item value can be used with or without the colon.

<<>>=
getMeta(.ameta,"Description")
@

\section{All together}

All metadata information and some additional useful directory path strings can be extracted with the function \fct{pisa}:

<<>>=
p <- pisa()
@

The result is a list with metadata information. The elements are described in the function's help file \code{`?pisa`}.

Access the individual parts is as usual:

<<>>=
p$A
@

Path to Study level:

<<>>=
p$S$root
@

In addition, we get  dot-named objects (similar as above) in the global environment. For details, see help for function \fct{pisa}. The dot-named objects are hidden, so we need to list them as

<<>>=
ls(pattern="^\\.",all.names=TRUE)
@


\clearpage
\section{To end}
Reset working directory, if needed.

<<>>=
setwd(oldwd)
@


%% knitr child handling
%%
%<<child='child_file.Rnw'>>=
%@
%<<result="hide">>=
%out <- ""
%for ( linija in levels(phenodata$Celicna.linija))
%out <- paste(out,knit_child("child_file.rnw",quiet=TRUE))
%@
%\Sexpr{out}
%%
% ----------------------------------------------------------------
%\bibliographystyle{chicago}
%\addcontentsline{toc}{section}{\refname}
%\bibliography{ab-general}
%--------------------------------------------------------------

%\clearpage
%\appendix
%\phantomsection\addcontentsline{toc}{section}{\appendixname}
%\section{\R\ funkcije}
%\input{}

\clearpage
\section*{SessionInfo}
<<sessionInfo,results='asis',echo=FALSE>>=
cat(win.version(),"\n")
toLatex(sessionInfo())
@

\end{document}
% ----------------------------------------------------------------
